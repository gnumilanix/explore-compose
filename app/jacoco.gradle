jacoco {
    toolVersion = "0.8.8"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        html.required = true
        xml.required = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*$Result.*',
            '**/*$Result$*.*',
            '**hilt_aggregated_deps**',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*GeneragedInjector*.*',
            '**/*_GeneragedInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*',
            '**/*$Result$*.*',
            'dagger/**/*.class',
            'hilt_aggregated_deps/**/*.class',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)

    def coverageSourceDirs = [
            "src/main/java",
            "/src/debug/java"
    ]

    def unitTestCoverageData = fileTree("$buildDir/outputs/unit_test_code_coverage/debugUnitTest/")
            .matching { include "*.exec" }
    def instrumentationTestCoverageData = fileTree("$buildDir/outputs/code_coverage/debugAndroidTest/connected")
            .matching { include "**/*.ec" }

    sourceDirectories.from = files(coverageSourceDirs)
    classDirectories.from = files([javaClasses, kotlinClasses])
    executionData.from = unitTestCoverageData + instrumentationTestCoverageData
}
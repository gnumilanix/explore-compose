plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'jacoco'
    id 'com.google.dagger.hilt.android'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.google.devtools.ksp' version '1.8.0-1.0.8'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.10'
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

jacoco {
    toolVersion = "0.8.8"
}

android {
    namespace 'com.ignitetech.compose'
    compileSdk 33

    defaultConfig {
        applicationId "com.ignitetech.compose"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.ignitetech.compose.utility.ComposeTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        ksp {
            arg('room.schemaLocation', "$projectDir/schemas")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        debug.java.srcDirs = ['debug/java']
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        packagingOptions {
            jniLibs {
                useLegacyPackaging true
            }
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += 'META-INF/LICENSE.md'
            excludes += 'META-INF/LICENSE-notice.md'
        }
    }
    signingConfigs {
        debug {
            storeFile file("../keys/debug.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias "debug"
            keyPassword "keepbuilding"
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        html.required = true
        xml.required = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*$Result.*',
            '**/*$Result$*.*',
            '**hilt_aggregated_deps**',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*GeneragedInjector*.*',
            '**/*_GeneragedInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*',
            '**/*$Result$*.*',
            'dagger/**/*.class',
            'hilt_aggregated_deps/**/*.class',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludes)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)

    def coverageSourceDirs = [
            "src/main/java",
            "/src/debug/java"
    ]

    def unitTestCoverageData = files(["$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"])
    def instrumentationTestCoverageData = fileTree("$buildDir/outputs/code_coverage/debugAndroidTest/connected")
            .matching { include "**/*.ec" }

    sourceDirectories.from = files(coverageSourceDirs)
    classDirectories.from = files([javaClasses, kotlinClasses])
    executionData.from = unitTestCoverageData.files + instrumentationTestCoverageData.files
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$compose_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$compose_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$compose_lifecycle_version"
    implementation 'androidx.activity:activity-compose:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.runtime:runtime:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.4.0'
    implementation "androidx.navigation:navigation-compose:$navigation_version"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation "androidx.datastore:datastore-preferences:$datastore_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager-indicators:$accompanist_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-permissions:$accompanist_version"

    implementation "androidx.room:room-runtime:$room_version"
    implementation 'androidx.test.ext:junit-ktx:1.1.5'

    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-paging:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    implementation 'io.coil-kt:coil-compose:2.2.2'

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_android_version"
    implementation "androidx.hilt:hilt-work:$hilt_android_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "androidx.test:runner:$android_runner_version"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "io.mockk:mockk:$mock_version"
    testImplementation "app.cash.turbine:turbine:$turbine_version"

    androidTestImplementation "androidx.test:runner:$android_runner_version"
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "io.mockk:mockk-android:$mock_version"
    androidTestImplementation 'androidx.arch.core:core-testing:2.2.0'
    androidTestImplementation "app.cash.turbine:turbine:$turbine_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    androidTestImplementation "androidx.navigation:navigation-testing:$navigation_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
}

kapt {
    correctErrorTypes true
}